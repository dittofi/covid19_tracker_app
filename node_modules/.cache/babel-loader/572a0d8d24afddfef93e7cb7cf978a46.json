{"ast":null,"code":"var _jsxFileName = \"/Users/samuelvirgo/Documents/development/ditto/covid_19/src/app.js\";\nimport React from 'react';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport * as d3 from 'd3';\nimport { countries } from './countries.js';\nimport { getTimeseriesData, getBriefData } from './rest_api.js';\nimport { measures } from './measures.js';\nimport Plot from 'react-plotly.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      country: \"US\",\n      metric: \"confirmed\",\n      startDate: new Date(),\n      endDate: new Date(),\n      measuresData: [],\n      timeseriesData: [],\n      countryTotalConfirmed: null,\n      countryTotalRecovered: null,\n      countryTotalDeaths: null\n    };\n    this.onPlot = this.onPlot.bind(this);\n  }\n\n  async onPlot() {\n    // Get state.\n    const {\n      country,\n      metric,\n      startDate,\n      endDate\n    } = this.state; // Declare variables.\n\n    let timeseriesData = [];\n    let countryTotalConfirmed = 0;\n    let countryTotalRecovered = 0;\n    let countryTotalDeaths = 0;\n    let worldTotalConfirmed = 0;\n    let worldTotalRecovered = 0;\n    let worldTotalDeaths = 0; // Get time series data.\n\n    let data = await getTimeseriesData(country);\n\n    if (data.data && data.data.length > 0) {\n      data = data.data[0] && data.data[0].timeseries ? data.data[0].timeseries : {};\n      var parseTime = d3.timeParse(\"%-m/%-d/%y\");\n      Object.keys(data).forEach(key => {\n        let date = parseTime(key);\n\n        if (date >= startDate && date <= endDate) {\n          timeseriesData.push({\n            date: date,\n            value: data[key][metric]\n          });\n        }\n\n        countryTotalConfirmed = countryTotalConfirmed + data[key].confirmed;\n        countryTotalRecovered = countryTotalRecovered + data[key].recovered;\n        countryTotalDeaths = countryTotalDeaths + data[key].deaths;\n      });\n    } // Get brief data.\n\n\n    data = await getBriefData();\n\n    if (data.data) {\n      worldTotalConfirmed = data.data.confirmed;\n      worldTotalDeaths = data.data.deaths;\n      worldTotalRecovered = data.data.recovered;\n    } // Get measures data.\n\n\n    let measuresData = [];\n    measures.forEach(measure => {\n      if (measure.county === country && measure.date_implemented <= endDate && measure.date_implemented >= startDate) {}\n    }); // Update state.\n\n    this.setState({\n      measuresData: measuresData,\n      timeseriesData: timeseriesData,\n      countryTotalConfirmed: countryTotalConfirmed,\n      countryTotalRecovered: countryTotalRecovered,\n      countryTotalDeaths: countryTotalDeaths,\n      worldTotalConfirmed: worldTotalConfirmed,\n      worldTotalDeaths: worldTotalDeaths,\n      worldTotalRecovered: worldTotalRecovered\n    });\n  }\n\n  render() {\n    const {\n      country,\n      metric,\n      startDate,\n      endDate,\n      measuresData,\n      timeseriesData,\n      countryTotalDeaths,\n      countryTotalRecovered,\n      countryTotalConfirmed,\n      worldTotalDeaths,\n      worldTotalRecovered,\n      worldTotalConfirmed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-column\",\n      style: {\n        height: \"100vh\",\n        width: \"100vw\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-grow-1 d-flex p-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card flex-grow-1 mr-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body d-flex flex-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      country: country,\n      metric: metric,\n      startDate: startDate,\n      endDate: endDate,\n      onCountryChange: e => this.setState({\n        country: e.target.value\n      }),\n      onMetricChange: e => this.setState({\n        metric: e.target.value\n      }),\n      onStartDateChange: val => this.setState({\n        startDate: val\n      }),\n      onEndDateChange: val => this.setState({\n        endDate: val\n      }),\n      onPlot: this.onPlot,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 8\n      }\n    }), /*#__PURE__*/React.createElement(Graph, {\n      metric: metric,\n      timeseriesData: timeseriesData,\n      measuresData: measuresData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 8\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      style: {\n        flex: \"0 0 300px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MetricsTable, {\n      country: country,\n      countryTotalDeaths: countryTotalDeaths,\n      countryTotalRecovered: countryTotalRecovered,\n      countryTotalConfirmed: countryTotalConfirmed,\n      worldTotalConfirmed: worldTotalConfirmed,\n      worldTotalDeaths: worldTotalDeaths,\n      worldTotalRecovered: worldTotalRecovered,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 8\n      }\n    })))), /*#__PURE__*/React.createElement(\"footer\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nfunction Form(props) {\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form-inline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 4\n    }\n  }, \"Compare:\"), /*#__PURE__*/React.createElement(\"select\", {\n    className: \"form-control\",\n    value: props.country,\n    onChange: props.onCountryChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 4\n    }\n  }, countries.map((country, i) => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: i,\n      value: country.Code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 6\n      }\n    }, country.Name);\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 4\n    }\n  }, \"VS\"), /*#__PURE__*/React.createElement(\"select\", {\n    className: \"form-control\",\n    onChange: props.onMetricChange,\n    value: props.metric,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"confirmed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 5\n    }\n  }, \"Total confirmed cases\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"recovered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }, \"Total recovered\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"deaths\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }, \"Total dead\")), /*#__PURE__*/React.createElement(DatePicker, {\n    onChange: props.onStartDateChange,\n    selected: props.startDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 4\n    }\n  }, \"-\"), /*#__PURE__*/React.createElement(DatePicker, {\n    onChange: props.onEndDateChange,\n    selected: props.endDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: e => {\n      e.preventDefault();\n      props.onPlot();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 4\n    }\n  }, \"Submit\"));\n}\n\nfunction Graph(props) {\n  const {\n    timeseriesData,\n    metric\n  } = props;\n  let color = \"red\";\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-grow-1\",\n    style: {\n      position: \"relative\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(AutoSizer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 4\n    }\n  }, ({\n    height,\n    width\n  }) => /*#__PURE__*/React.createElement(Plot, {\n    config: {\n      displayModeBar: false\n    },\n    data: [{\n      x: timeseriesData.map(data => data.date),\n      y: timeseriesData.map(data => data.value),\n      mode: 'lines',\n      marker: {\n        color: color\n      }\n    }],\n    layout: {\n      width: width,\n      height: height\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 6\n    }\n  })));\n}\n\nfunction MetricsTable(props) {\n  const {\n    country,\n    countryTotalConfirmed,\n    countryTotalRecovered,\n    countryTotalDeaths,\n    worldTotalDeaths,\n    worldTotalRecovered,\n    worldTotalConfirmed\n  } = props;\n  let countryTotalActive;\n\n  if (countryTotalConfirmed && countryTotalRecovered && countryTotalDeaths) {\n    countryTotalActive = countryTotalConfirmed - countryTotalRecovered - countryTotalDeaths;\n  }\n\n  let worldTotalActive;\n\n  if (worldTotalConfirmed && worldTotalRecovered && worldTotalDeaths) {\n    worldTotalActive = worldTotalConfirmed - worldTotalRecovered - worldTotalDeaths;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 16\n    }\n  }, country), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 16\n    }\n  }, \"World\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 20\n    }\n  }, \"Total Count\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 16\n    }\n  }, countryTotalConfirmed), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 16\n    }\n  }, worldTotalConfirmed)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 20\n    }\n  }, \"Total Active\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 16\n    }\n  }, countryTotalActive), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 16\n    }\n  }, worldTotalActive)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 20\n    }\n  }, \"Total Dead\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 16\n    }\n  }, countryTotalDeaths), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 16\n    }\n  }, worldTotalDeaths)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 20\n    }\n  }, \"Total Recovered\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 16\n    }\n  }, countryTotalRecovered), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 16\n    }\n  }, worldTotalRecovered)))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/samuelvirgo/Documents/development/ditto/covid_19/src/app.js"],"names":["React","DatePicker","AutoSizer","d3","countries","getTimeseriesData","getBriefData","measures","Plot","App","Component","constructor","props","state","country","metric","startDate","Date","endDate","measuresData","timeseriesData","countryTotalConfirmed","countryTotalRecovered","countryTotalDeaths","onPlot","bind","worldTotalConfirmed","worldTotalRecovered","worldTotalDeaths","data","length","timeseries","parseTime","timeParse","Object","keys","forEach","key","date","push","value","confirmed","recovered","deaths","measure","county","date_implemented","setState","render","height","width","e","target","val","flex","Form","onCountryChange","map","i","Code","Name","onMetricChange","onStartDateChange","onEndDateChange","preventDefault","Graph","color","position","displayModeBar","x","y","mode","marker","MetricsTable","countryTotalActive","worldTotalActive"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport * as d3 from 'd3';\n\nimport { countries } from './countries.js';\nimport { getTimeseriesData, getBriefData } from './rest_api.js';\nimport { measures } from './measures.js';\n\nimport Plot from 'react-plotly.js';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcountry: \"US\",\n\t\t\tmetric: \"confirmed\",\n\t\t\tstartDate: new Date(),\n\t\t\tendDate: new Date(),\n\n\t\t\tmeasuresData:[],\n\t\t\ttimeseriesData:[],\n\t\t\tcountryTotalConfirmed: null,\n\t\t\tcountryTotalRecovered: null,\n\t\t\tcountryTotalDeaths: null,\n\t\t}\n\n\t\tthis.onPlot = this.onPlot.bind(this);\n\t}\n\n\tasync onPlot() {\n\t\t// Get state.\n\t\tconst { country, metric, startDate, endDate } = this.state;\n\n\t\t// Declare variables.\n\t\tlet timeseriesData = [];\n\t\t\n\t\tlet countryTotalConfirmed = 0;\n\t\tlet countryTotalRecovered = 0;\n\t\tlet countryTotalDeaths = 0;\n\n\t\tlet worldTotalConfirmed = 0;\n\t\tlet worldTotalRecovered = 0;\n\t\tlet worldTotalDeaths = 0;\n\n\t\t\n\t\t// Get time series data.\n\t\tlet data = await getTimeseriesData(country);\n\t\tif(data.data && data.data.length > 0) {\n\t\t\tdata = data.data[0] && data.data[0].timeseries ? data.data[0].timeseries : {};\n\n\t\t\tvar parseTime = d3.timeParse(\"%-m/%-d/%y\");\n\t\t\tObject.keys(data).forEach((key) => {\n\t\t\t\tlet date = parseTime(key);\n\t\t\t\tif(date >= startDate && date <= endDate) {\n\t\t\t\t\ttimeseriesData.push({date:date, value:data[key][metric]});\n\t\t\t\t}\n\n\t\t\t\tcountryTotalConfirmed = countryTotalConfirmed + data[key].confirmed;\n\t\t\t\tcountryTotalRecovered = countryTotalRecovered + data[key].recovered;\n\t\t\t\tcountryTotalDeaths = countryTotalDeaths + data[key].deaths;\n\t\t\t});\n\t\t}\n\n\t\t// Get brief data.\n\t\tdata = await getBriefData();\n\t\tif(data.data) {\n\t\t\tworldTotalConfirmed = data.data.confirmed;\n\t\t\tworldTotalDeaths = data.data.deaths;\n\t\t\tworldTotalRecovered = data.data.recovered;\n\t\t}\n\n\t\t// Get measures data.\n\t\tlet measuresData = [];\n\t\tmeasures.forEach((measure) => {\n\t\t\tif(measure.county === country && measure.date_implemented <= endDate && measure.date_implemented >= startDate) {\n\n\t\t\t}\n\t\t});\n\n\t\t// Update state.\n\t\tthis.setState({\n\t\t\tmeasuresData: measuresData,\n\t\t\ttimeseriesData: timeseriesData,\n\t\t\tcountryTotalConfirmed: countryTotalConfirmed,\n\t\t\tcountryTotalRecovered: countryTotalRecovered,\n\t\t\tcountryTotalDeaths: countryTotalDeaths,\n\t\t\tworldTotalConfirmed: worldTotalConfirmed,\n\t\t\tworldTotalDeaths: worldTotalDeaths,\n\t\t\tworldTotalRecovered: worldTotalRecovered,\n\t\t})\n\t}\n\n\trender() {\n\t\tconst { \n\t\t\tcountry, \n\t\t\tmetric, \n\t\t\tstartDate, \n\t\t\tendDate, \n\t\t\tmeasuresData,\n\t\t\ttimeseriesData,\n\t\t\tcountryTotalDeaths,\n\t\t\tcountryTotalRecovered,\n\t\t\tcountryTotalConfirmed,\n\t\t\tworldTotalDeaths,\n\t\t\tworldTotalRecovered,\n\t\t\tworldTotalConfirmed,\t\t\t\n\t\t} = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"d-flex flex-column\" style={{height:\"100vh\", width:\"100vw\"}}>\n\t\t\t\t<header>\n\t\t\t\t</header>\n\t\t\t\t<div className=\"flex-grow-1 d-flex p-3\">\n\t\t\t\t\t<div className=\"card flex-grow-1 mr-3\">\n\t\t\t\t\t\t<div className=\"card-body d-flex flex-column\">\n\t\t\t\t\t\t\t<Form\n\t\t\t\t\t\t\t\tcountry={country}\n\t\t\t\t\t\t\t\tmetric={metric}\n\t\t\t\t\t\t\t\tstartDate={startDate}\n\t\t\t\t\t\t\t\tendDate={endDate}\n\n\t\t\t\t\t\t\t\tonCountryChange={(e) => this.setState({country:e.target.value})}\n\t\t\t\t\t\t\t\tonMetricChange={(e) => this.setState({metric:e.target.value})}\n\t\t\t\t\t\t\t\tonStartDateChange={(val) => this.setState({startDate:val})}\n\t\t\t\t\t\t\t\tonEndDateChange={(val) => this.setState({endDate:val})}\n\n\t\t\t\t\t\t\t\tonPlot={this.onPlot}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Graph\n\t\t\t\t\t\t\t\tmetric={metric}\n\t\t\t\t\t\t\t\ttimeseriesData={timeseriesData}\n\t\t\t\t\t\t\t\tmeasuresData={measuresData}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"card\" style={{flex:\"0 0 300px\"}}>\n\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t<MetricsTable \n\t\t\t\t\t\t\t\tcountry={country}\n\t\t\t\t\t\t\t\tcountryTotalDeaths={countryTotalDeaths}\n\t\t\t\t\t\t\t\tcountryTotalRecovered={countryTotalRecovered}\n\t\t\t\t\t\t\t\tcountryTotalConfirmed={countryTotalConfirmed}\n\t\t\t\t\t\t\t\tworldTotalConfirmed={worldTotalConfirmed}\n\t\t\t\t\t\t\t\tworldTotalDeaths={worldTotalDeaths}\n\t\t\t\t\t\t\t\tworldTotalRecovered={worldTotalRecovered}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<footer>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction Form(props) {\n\treturn (\n\t\t<form className=\"form-inline\">\n\t\t\t<label>Compare:</label>\n\t\t\t<select\n\t\t\t\tclassName=\"form-control\" \n\t\t\t\tvalue={props.country}\n\t\t\t\tonChange={props.onCountryChange}\n\t\t\t>\n\t\t\t{countries.map((country, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<option key={i} value={country.Code}>{country.Name}</option>\n\t\t\t\t);\n\t\t\t})}\n\t\t\t</select>\n\t\t\t<label>VS</label>\n\t\t\t<select\n\t\t\t\tclassName=\"form-control\" \n\t\t\t\tonChange={props.onMetricChange}\n\t\t\t\tvalue={props.metric}\n\t\t\t>\n\t\t\t\t<option value=\"confirmed\">Total confirmed cases</option>\n\t\t\t\t<option value=\"recovered\">Total recovered</option>\n\t\t\t\t<option value=\"deaths\">Total dead</option>\n\t\t\t</select>\n\t\t\t<DatePicker\n\t\t\t\tonChange={props.onStartDateChange}\n\t\t\t\tselected={props.startDate}\n\t\t\t/>\n\t\t\t<label>-</label>\n\t\t\t<DatePicker\n\t\t\t\tonChange={props.onEndDateChange}\n\t\t\t\tselected={props.endDate}\n\t\t\t/>\n\t\t\t<button \n\t\t\t\tclassName=\"btn\"\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tprops.onPlot();\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tSubmit\n\t\t\t</button>\n\t\t</form>\n\t);\n}\n\nfunction Graph(props) {\n\tconst { timeseriesData, metric } = props;\n\tlet color = \"red\";\n\n\treturn (\n\t\t<div className=\"flex-grow-1\" style={{position:\"relative\"}}>\n\t\t\t<AutoSizer>\n\t\t\t\t{({ height, width }) => (\n\t\t\t\t\t<Plot\n\t\t\t\t\t\tconfig={{displayModeBar: false}}\n\t\t\t\t\t\tdata=\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tx: timeseriesData.map((data) => data.date),\n\t\t\t\t\t\t\t\t\ty: timeseriesData.map((data) => data.value),\n\t\t\t\t\t\t\t\t\tmode: 'lines',\n\t\t\t\t\t\t\t\t\tmarker: {color: color},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlayout={ {width: width, height: height} }\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</AutoSizer>\n\t\t</div>\n\t);\n}\n\nfunction MetricsTable(props) {\n\tconst { \n\t\tcountry, \n\t\tcountryTotalConfirmed, \n\t\tcountryTotalRecovered, \n\t\tcountryTotalDeaths,\n\t\tworldTotalDeaths,\n\t\tworldTotalRecovered,\n\t\tworldTotalConfirmed,\n\t} = props;\n\n\tlet countryTotalActive;\n\tif(countryTotalConfirmed && countryTotalRecovered && countryTotalDeaths) {\n\t\tcountryTotalActive = countryTotalConfirmed - countryTotalRecovered - countryTotalDeaths;\n\t}\n\n\tlet worldTotalActive;\n\tif(worldTotalConfirmed && worldTotalRecovered && worldTotalDeaths) {\n\t\tworldTotalActive = worldTotalConfirmed - worldTotalRecovered - worldTotalDeaths;\n\t}\t\n\n\treturn (\n\t\t<div>\n\t\t\t<table className=\"table\">\n\t\t\t    <thead>\n\t\t\t        <tr>\n\t\t\t            <th></th>\n\t\t\t            <th>{country}</th>\n\t\t\t            <th>World</th>\n\t\t\t        </tr>\n\t\t\t    </thead>\n\t\t\t    <tbody>\n\t\t\t        <tr>\n\t\t\t            <td><span>Total Count</span></td>\n\t\t\t            <td>{countryTotalConfirmed}</td>\n\t\t\t            <td>{worldTotalConfirmed}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Total Active</span></td>\n\t\t\t            <td>{countryTotalActive}</td>\n\t\t\t            <td>{worldTotalActive}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Total Dead</span></td>\n\t\t\t            <td>{countryTotalDeaths}</td>\n\t\t\t            <td>{worldTotalDeaths}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Total Recovered</span></td>\n\t\t\t            <td>{countryTotalRecovered}</td>\n\t\t\t            <td>{worldTotalRecovered}</td>\n\t\t\t        </tr>\n\t\t\t    </tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}