{"ast":null,"code":"var _jsxFileName = \"/Users/samuelvirgo/Documents/development/ditto/covid_19/src/chart.js\";\nimport React from 'react';\nimport * as d3 from 'd3';\n\nclass Chart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidUpdate() {\n    document.querySelectorAll(\".textpoint\").forEach(elem => {\n      console.log(elem);\n    });\n  }\n\n  render() {\n    const {\n      timeseriesData,\n      measuresData,\n      height,\n      width\n    } = this.props;\n    let minX = Math.min(d3.min(timeseriesData => timeseriesData.value), d3.min(measuresData => timeseriesData.value));\n    let maxX = Math.max(d3.min(measuresData => timeseriesData.value), d3.min(measuresData => timeseriesData.value));\n    const xScale = d3.scaleTime().domain([minX, maxX]).range([marginLeft, width - marginRight]);\n    const yScale = this.yScale.domain([d3.min(timeseriesData => timeseriesData.value), d3.max(timeseriesData => timeseriesData.value)]).range([height - marginBottom, marginTop]);\n    return /*#__PURE__*/React.createElement(\"svg\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(LineChart, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nfunction LineChart(props) {\n  // Get props.\n  const xScale = props.xScale;\n  const yScale = props.yScale; // Build line function.\n\n  var line = d3.line().x(function (d) {\n    return xScale(d.date);\n  }).y(function (d) {\n    return yScale(d.value);\n  });\n  var linePlot = line(props.data); // Plot.\n\n  return /*#__PURE__*/React.createElement(\"path\", {\n    className: \"line\",\n    d: linePlot,\n    style: {\n      fill: 'none',\n      strokeWidth: '1.5px',\n      stroke: props.stroke\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 3\n    }\n  });\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/samuelvirgo/Documents/development/ditto/covid_19/src/chart.js"],"names":["React","d3","Chart","Component","constructor","props","componentDidUpdate","document","querySelectorAll","forEach","elem","console","log","render","timeseriesData","measuresData","height","width","minX","Math","min","value","maxX","max","xScale","scaleTime","domain","range","marginLeft","marginRight","yScale","marginBottom","marginTop","LineChart","line","x","d","date","y","linePlot","data","fill","strokeWidth","stroke"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,MAAMC,KAAN,SAAoBF,KAAK,CAACG,SAA1B,CAAoC;AACnCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA;;AAEDC,EAAAA,kBAAkB,GAAG;AACpBC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,YAA1B,EAAwCC,OAAxC,CAAiDC,IAAD,IAAU;AACzDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,KAHD;AAIA;;AAEDG,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEC,MAAAA,cAAF;AAAkBC,MAAAA,YAAlB;AAAgCC,MAAAA,MAAhC;AAAwCC,MAAAA;AAAxC,QAAkD,KAAKZ,KAA7D;AAEA,QAAIa,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASnB,EAAE,CAACmB,GAAH,CAAQN,cAAD,IAAoBA,cAAc,CAACO,KAA1C,CAAT,EAA2DpB,EAAE,CAACmB,GAAH,CAAQL,YAAD,IAAkBD,cAAc,CAACO,KAAxC,CAA3D,CAAX;AACA,QAAIC,IAAI,GAAGH,IAAI,CAACI,GAAL,CAAStB,EAAE,CAACmB,GAAH,CAAQL,YAAD,IAAkBD,cAAc,CAACO,KAAxC,CAAT,EAAyDpB,EAAE,CAACmB,GAAH,CAAQL,YAAD,IAAkBD,cAAc,CAACO,KAAxC,CAAzD,CAAX;AAEA,UAAMG,MAAM,GAAGvB,EAAE,CAACwB,SAAH,GACbC,MADa,CACN,CAACR,IAAD,EAAOI,IAAP,CADM,EAEbK,KAFa,CAEP,CAACC,UAAD,EAAaX,KAAK,GAAGY,WAArB,CAFO,CAAf;AAIA,UAAMC,MAAM,GAAG,KAAKA,MAAL,CACbJ,MADa,CACN,CAACzB,EAAE,CAACmB,GAAH,CAAQN,cAAD,IAAoBA,cAAc,CAACO,KAA1C,CAAD,EAAmDpB,EAAE,CAACsB,GAAH,CAAQT,cAAD,IAAoBA,cAAc,CAACO,KAA1C,CAAnD,CADM,EAEbM,KAFa,CAEP,CAACX,MAAM,GAAGe,YAAV,EAAwBC,SAAxB,CAFO,CAAf;AAIA,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADD;AAKA;;AA/BkC;;AAoCpC,SAASC,SAAT,CAAmB5B,KAAnB,EAA0B;AACzB;AACA,QAAMmB,MAAM,GAAGnB,KAAK,CAACmB,MAArB;AACA,QAAMM,MAAM,GAAGzB,KAAK,CAACyB,MAArB,CAHyB,CAKzB;;AACA,MAAII,IAAI,GAAGjC,EAAE,CAACiC,IAAH,GACTC,CADS,CACP,UAASC,CAAT,EAAY;AAAE,WAAOZ,MAAM,CAACY,CAAC,CAACC,IAAH,CAAb;AAAwB,GAD/B,EAETC,CAFS,CAEP,UAASF,CAAT,EAAY;AAAE,WAAON,MAAM,CAACM,CAAC,CAACf,KAAH,CAAb;AAAyB,GAFhC,CAAX;AAIA,MAAIkB,QAAQ,GAAGL,IAAI,CAAC7B,KAAK,CAACmC,IAAP,CAAnB,CAVyB,CAYzB;;AACA,sBACC;AACC,IAAA,SAAS,EAAC,MADX;AAEC,IAAA,CAAC,EAAED,QAFJ;AAGC,IAAA,KAAK,EAAE;AAACE,MAAAA,IAAI,EAAC,MAAN;AAAcC,MAAAA,WAAW,EAAC,OAA1B;AAAmCC,MAAAA,MAAM,EAACtC,KAAK,CAACsC;AAAhD,KAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD;AAOA;;AAED,eAAezC,KAAf","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3';\n\nclass Chart extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\tcomponentDidUpdate() {\n\t\tdocument.querySelectorAll(\".textpoint\").forEach((elem) => {\n\t\t\tconsole.log(elem);\n\t\t\t\n\t\t});\n\t}\n\n\trender() {\n\t\tconst { timeseriesData, measuresData, height, width } = this.props;\n\n\t\tlet minX = Math.min(d3.min((timeseriesData) => timeseriesData.value), d3.min((measuresData) => timeseriesData.value))\n\t\tlet maxX = Math.max(d3.min((measuresData) => timeseriesData.value), d3.min((measuresData) => timeseriesData.value))\n\n\t\tconst xScale = d3.scaleTime()\n\t\t\t.domain([minX, maxX])\n\t\t\t.range([marginLeft, width - marginRight]);\n\n\t\tconst yScale = this.yScale\n\t\t\t.domain([d3.min((timeseriesData) => timeseriesData.value), d3.max((timeseriesData) => timeseriesData.value)])\n\t\t\t.range([height - marginBottom, marginTop]);\n\n\t\treturn (\n\t\t\t<svg>\n\t\t\t\t<LineChart />\n\t\t\t</svg>\n\t\t);\n\t}\n}\n\n\n\nfunction LineChart(props) {\n\t// Get props.\n\tconst xScale = props.xScale;\n\tconst yScale = props.yScale;\n\n\t// Build line function.\n\tvar line = d3.line()\n\t\t.x(function(d) { return xScale(d.date); })\n\t\t.y(function(d) { return yScale(d.value); });\n\n\tvar linePlot = line(props.data);\n\n\t// Plot.\n\treturn (\n\t\t<path \n\t\t\tclassName=\"line\" \n\t\t\td={linePlot} \n\t\t\tstyle={{fill:'none', strokeWidth:'1.5px', stroke:props.stroke}}\n\t\t/>\n\t);\n}\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}