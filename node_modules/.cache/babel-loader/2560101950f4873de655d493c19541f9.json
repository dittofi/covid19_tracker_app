{"ast":null,"code":"var _jsxFileName = \"/Users/samuelvirgo/Documents/development/ditto/covid_19/src/app.js\";\nimport React from 'react';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport * as d3 from 'd3';\nimport { countries } from './countries.js';\nimport { getTimeseriesData, getBriefData } from './rest_api.js';\nimport { measures } from './measures.js';\nimport Chart from './chart/chart.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      country: \"USA\",\n      metric: \"confirmed\",\n      startDate: new Date(2020, 1, 1),\n      endDate: new Date(),\n      measuresData: [],\n      timeseriesData: [],\n      countryTotalConfirmed: null,\n      countryTotalRecovered: null,\n      countryTotalDeaths: null,\n      measure: {}\n    };\n    this.onPlot = this.onPlot.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  componentDidMount() {\n    var parseTime = d3.timeParse(\"%Y-%m-%d %H:%M:%S%Z\");\n    measures.forEach(measure => measure.date_implemented = parseTime(measure.date_implemented));\n    this.onPlot();\n  }\n\n  onClick(measure) {\n    this.setState({\n      measure: measure\n    });\n  }\n\n  async onPlot() {\n    // Get state.\n    const {\n      country,\n      metric,\n      startDate,\n      endDate\n    } = this.state; // Declare variables.\n\n    let timeseriesData = [];\n    let countryTotalConfirmed = 0;\n    let countryTotalRecovered = 0;\n    let countryTotalDeaths = 0;\n    let worldTotalConfirmed = 0;\n    let worldTotalRecovered = 0;\n    let worldTotalDeaths = 0; // Get time series data.\n\n    let data = await getTimeseriesData(country);\n\n    if (data.data && data.data.length > 0) {\n      data = data.data[0] && data.data[0].timeseries ? data.data[0].timeseries : {};\n      var parseTime = d3.timeParse(\"%-m/%-d/%y\");\n      Object.keys(data).forEach(key => {\n        let date = parseTime(key);\n\n        if (date >= startDate && date <= endDate) {\n          const value = data[key][metric];\n          timeseriesData.push({\n            date: date,\n            value: value\n          });\n        }\n\n        countryTotalConfirmed = countryTotalConfirmed + data[key].confirmed;\n        countryTotalRecovered = countryTotalRecovered + data[key].recovered;\n        countryTotalDeaths = countryTotalDeaths + data[key].deaths;\n      });\n    } // Get brief data.\n\n\n    data = await getBriefData();\n\n    if (data.data) {\n      worldTotalConfirmed = data.data.confirmed;\n      worldTotalDeaths = data.data.deaths;\n      worldTotalRecovered = data.data.recovered;\n    } // Get measures data.\n\n\n    let measuresData = [];\n    measures.forEach(measure => {\n      if (measure.iso === country && measure.date_implemented <= endDate && measure.date_implemented >= startDate) {\n        measuresData.push(measure);\n      }\n    }); // Update state.\n\n    this.setState({\n      measuresData: measuresData,\n      timeseriesData: timeseriesData,\n      countryTotalConfirmed: countryTotalConfirmed,\n      countryTotalRecovered: countryTotalRecovered,\n      countryTotalDeaths: countryTotalDeaths,\n      worldTotalConfirmed: worldTotalConfirmed,\n      worldTotalDeaths: worldTotalDeaths,\n      worldTotalRecovered: worldTotalRecovered\n    });\n  }\n\n  render() {\n    const {\n      country,\n      metric,\n      startDate,\n      endDate,\n      measuresData,\n      timeseriesData,\n      countryTotalDeaths,\n      countryTotalRecovered,\n      countryTotalConfirmed,\n      worldTotalDeaths,\n      worldTotalRecovered,\n      worldTotalConfirmed,\n      measure\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-column\",\n      style: {\n        height: \"100vh\",\n        width: \"100vw\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-grow-1 d-flex p-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card flex-grow-1 mr-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body d-flex flex-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      country: country,\n      metric: metric,\n      startDate: startDate,\n      endDate: endDate,\n      onCountryChange: e => this.setState({\n        country: e.target.value\n      }),\n      onMetricChange: e => this.setState({\n        metric: e.target.value\n      }),\n      onStartDateChange: val => this.setState({\n        startDate: val\n      }),\n      onEndDateChange: val => this.setState({\n        endDate: val\n      }),\n      onPlot: this.onPlot,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 8\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-grow-1\",\n      style: {\n        position: \"relative\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(AutoSizer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }\n    }, ({\n      height,\n      width\n    }) => /*#__PURE__*/React.createElement(Chart, {\n      height: height,\n      width: width,\n      metric: metric,\n      timeseriesData: timeseriesData,\n      measuresData: measuresData,\n      onClick: this.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      style: {\n        flex: \"0 0 300px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"100%\",\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"absolute\",\n        left: \"0px\",\n        right: \"0px\",\n        top: \"0px\",\n        bottom: \"0px\",\n        overflowY: \"auto\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MetricsTable, {\n      country: country,\n      countryTotalDeaths: countryTotalDeaths,\n      countryTotalRecovered: countryTotalRecovered,\n      countryTotalConfirmed: countryTotalConfirmed,\n      worldTotalConfirmed: worldTotalConfirmed,\n      worldTotalDeaths: worldTotalDeaths,\n      worldTotalRecovered: worldTotalRecovered,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(MeasuresTable, {\n      measure: measure,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 10\n      }\n    })))))), /*#__PURE__*/React.createElement(\"footer\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nfunction Form(props) {\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form-inline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 4\n    }\n  }, \"Compare:\"), /*#__PURE__*/React.createElement(\"select\", {\n    className: \"form-control\",\n    value: props.country,\n    onChange: props.onCountryChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 4\n    }\n  }, countries.map((country, i) => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: i,\n      value: country.iso3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 6\n      }\n    }, country.Country);\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 4\n    }\n  }, \"VS\"), /*#__PURE__*/React.createElement(\"select\", {\n    className: \"form-control\",\n    onChange: props.onMetricChange,\n    value: props.metric,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"confirmed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 5\n    }\n  }, \"Total confirmed cases\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"recovered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }\n  }, \"Total recovered\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"deaths\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }\n  }, \"Total dead\")), /*#__PURE__*/React.createElement(DatePicker, {\n    onChange: props.onStartDateChange,\n    selected: props.startDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 4\n    }\n  }, \"-\"), /*#__PURE__*/React.createElement(DatePicker, {\n    onChange: props.onEndDateChange,\n    selected: props.endDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn\",\n    onClick: e => {\n      e.preventDefault();\n      props.onPlot();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 4\n    }\n  }, \"Submit\"));\n}\n\nfunction MetricsTable(props) {\n  const {\n    country,\n    countryTotalConfirmed,\n    countryTotalRecovered,\n    countryTotalDeaths,\n    worldTotalDeaths,\n    worldTotalRecovered,\n    worldTotalConfirmed\n  } = props;\n  let countryTotalActive;\n\n  if (countryTotalConfirmed && countryTotalRecovered && countryTotalDeaths) {\n    countryTotalActive = countryTotalConfirmed - countryTotalRecovered - countryTotalDeaths;\n  }\n\n  let worldTotalActive;\n\n  if (worldTotalConfirmed && worldTotalRecovered && worldTotalDeaths) {\n    worldTotalActive = worldTotalConfirmed - worldTotalRecovered - worldTotalDeaths;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 16\n    }\n  }, country), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 16\n    }\n  }, \"World\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 20\n    }\n  }, \"Total Count\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 16\n    }\n  }, countryTotalConfirmed), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 16\n    }\n  }, worldTotalConfirmed)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 20\n    }\n  }, \"Total Active\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 16\n    }\n  }, countryTotalActive), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 16\n    }\n  }, worldTotalActive)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 20\n    }\n  }, \"Total Dead\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 16\n    }\n  }, countryTotalDeaths), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 16\n    }\n  }, worldTotalDeaths)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 20\n    }\n  }, \"Total Recovered\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 16\n    }\n  }, countryTotalRecovered), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 16\n    }\n  }, worldTotalRecovered)))));\n}\n\nfunction MeasuresTable(props) {\n  const {\n    measure\n  } = props;\n  var formatTime = d3.timeFormat(\"%B %d, %Y\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    class: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 20\n    }\n  }, \"Category\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 16\n    }\n  }, measure.category)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 20\n    }\n  }, \"Comments\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 16\n    }\n  }, measure.comments)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 20\n    }\n  }, \"Country\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 16\n    }\n  }, measure.country)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 20\n    }\n  }, \"Date Implemented\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 16\n    }\n  }, formatTime(measure.date_implemented))), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 20\n    }\n  }, \"Entry Date\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 16\n    }\n  }, measure.entry_date)))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/samuelvirgo/Documents/development/ditto/covid_19/src/app.js"],"names":["React","DatePicker","AutoSizer","d3","countries","getTimeseriesData","getBriefData","measures","Chart","App","Component","constructor","props","state","country","metric","startDate","Date","endDate","measuresData","timeseriesData","countryTotalConfirmed","countryTotalRecovered","countryTotalDeaths","measure","onPlot","bind","onClick","componentDidMount","parseTime","timeParse","forEach","date_implemented","setState","worldTotalConfirmed","worldTotalRecovered","worldTotalDeaths","data","length","timeseries","Object","keys","key","date","value","push","confirmed","recovered","deaths","iso","render","height","width","e","target","val","position","flex","left","right","top","bottom","overflowY","Form","onCountryChange","map","i","iso3","Country","onMetricChange","onStartDateChange","onEndDateChange","preventDefault","MetricsTable","countryTotalActive","worldTotalActive","MeasuresTable","formatTime","timeFormat","category","comments","entry_date"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport * as d3 from 'd3';\n\nimport { countries } from './countries.js';\nimport { getTimeseriesData, getBriefData } from './rest_api.js';\nimport { measures } from './measures.js';\nimport Chart from './chart/chart.js';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcountry: \"USA\",\n\t\t\tmetric: \"confirmed\",\n\t\t\tstartDate: new Date(2020, 1, 1),\n\t\t\tendDate: new Date(),\n\n\t\t\tmeasuresData:[],\n\t\t\ttimeseriesData:[],\n\t\t\tcountryTotalConfirmed: null,\n\t\t\tcountryTotalRecovered: null,\n\t\t\tcountryTotalDeaths: null,\n\n\t\t\tmeasure: {},\n\t\t}\n\n\t\tthis.onPlot = this.onPlot.bind(this);\n\t\tthis.onClick = this.onClick.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tvar parseTime = d3.timeParse(\"%Y-%m-%d %H:%M:%S%Z\");\n\t\tmeasures.forEach((measure) => measure.date_implemented = parseTime(measure.date_implemented));\n\t\tthis.onPlot();\n\t}\n\n\tonClick(measure) {\n\t\tthis.setState({\n\t\t\tmeasure: measure,\n\t\t})\n\t}\n\n\tasync onPlot() {\n\t\t// Get state.\n\t\tconst { country, metric, startDate, endDate } = this.state;\n\n\t\t// Declare variables.\n\t\tlet timeseriesData = [];\n\t\t\n\t\tlet countryTotalConfirmed = 0;\n\t\tlet countryTotalRecovered = 0;\n\t\tlet countryTotalDeaths = 0;\n\n\t\tlet worldTotalConfirmed = 0;\n\t\tlet worldTotalRecovered = 0;\n\t\tlet worldTotalDeaths = 0;\n\t\t\n\t\t// Get time series data.\n\t\tlet data = await getTimeseriesData(country);\n\t\tif(data.data && data.data.length > 0) {\n\t\t\tdata = data.data[0] && data.data[0].timeseries ? data.data[0].timeseries : {};\n\n\t\t\tvar parseTime = d3.timeParse(\"%-m/%-d/%y\");\n\t\t\tObject.keys(data).forEach((key) => {\n\t\t\t\tlet date = parseTime(key);\n\t\t\t\tif(date >= startDate && date <= endDate) {\n\t\t\t\t\tconst value = data[key][metric];\n\t\t\t\t\ttimeseriesData.push({date:date, value:value});\n\t\t\t\t}\n\n\t\t\t\tcountryTotalConfirmed = countryTotalConfirmed + data[key].confirmed;\n\t\t\t\tcountryTotalRecovered = countryTotalRecovered + data[key].recovered;\n\t\t\t\tcountryTotalDeaths = countryTotalDeaths + data[key].deaths;\n\t\t\t});\n\t\t}\n\n\t\t// Get brief data.\n\t\tdata = await getBriefData();\n\t\tif(data.data) {\n\t\t\tworldTotalConfirmed = data.data.confirmed;\n\t\t\tworldTotalDeaths = data.data.deaths;\n\t\t\tworldTotalRecovered = data.data.recovered;\n\t\t}\n\n\t\t// Get measures data.\n\t\tlet measuresData = [];\n\t\tmeasures.forEach((measure) => {\n\t\t\tif(measure.iso === country && measure.date_implemented <= endDate && measure.date_implemented >= startDate) {\n\t\t\t\tmeasuresData.push(measure);\n\t\t\t}\n\t\t});\n\n\t\t// Update state.\n\t\tthis.setState({\n\t\t\tmeasuresData: measuresData,\n\t\t\ttimeseriesData: timeseriesData,\n\t\t\tcountryTotalConfirmed: countryTotalConfirmed,\n\t\t\tcountryTotalRecovered: countryTotalRecovered,\n\t\t\tcountryTotalDeaths: countryTotalDeaths,\n\t\t\tworldTotalConfirmed: worldTotalConfirmed,\n\t\t\tworldTotalDeaths: worldTotalDeaths,\n\t\t\tworldTotalRecovered: worldTotalRecovered,\n\t\t})\n\t}\n\n\trender() {\n\t\tconst { \n\t\t\tcountry, \n\t\t\tmetric, \n\t\t\tstartDate, \n\t\t\tendDate, \n\t\t\tmeasuresData,\n\t\t\ttimeseriesData,\n\t\t\tcountryTotalDeaths,\n\t\t\tcountryTotalRecovered,\n\t\t\tcountryTotalConfirmed,\n\t\t\tworldTotalDeaths,\n\t\t\tworldTotalRecovered,\n\t\t\tworldTotalConfirmed,\n\t\t\tmeasure,\t\t\n\t\t} = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"d-flex flex-column\" style={{height:\"100vh\", width:\"100vw\"}}>\n\t\t\t\t<header>\n\t\t\t\t</header>\n\t\t\t\t<div className=\"flex-grow-1 d-flex p-3\">\n\t\t\t\t\t<div className=\"card flex-grow-1 mr-3\">\n\t\t\t\t\t\t<div className=\"card-body d-flex flex-column\">\n\t\t\t\t\t\t\t<Form\n\t\t\t\t\t\t\t\tcountry={country}\n\t\t\t\t\t\t\t\tmetric={metric}\n\t\t\t\t\t\t\t\tstartDate={startDate}\n\t\t\t\t\t\t\t\tendDate={endDate}\n\n\t\t\t\t\t\t\t\tonCountryChange={(e) => this.setState({country:e.target.value})}\n\t\t\t\t\t\t\t\tonMetricChange={(e) => this.setState({metric:e.target.value})}\n\t\t\t\t\t\t\t\tonStartDateChange={(val) => this.setState({startDate:val})}\n\t\t\t\t\t\t\t\tonEndDateChange={(val) => this.setState({endDate:val})}\n\n\t\t\t\t\t\t\t\tonPlot={this.onPlot}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<div className=\"flex-grow-1\" style={{position:\"relative\"}}>\n\t\t\t\t\t\t\t\t<AutoSizer>\n\t\t\t\t\t\t\t\t\t{({ height, width }) => (\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\t\t\t\t\theight={height}\n\t\t\t\t\t\t\t\t\t\t\twidth={width}\n\t\t\t\t\t\t\t\t\t\t\tmetric={metric}\n\t\t\t\t\t\t\t\t\t\t\ttimeseriesData={timeseriesData}\n\t\t\t\t\t\t\t\t\t\t\tmeasuresData={measuresData}\n\t\t\t\t\t\t\t\t\t\t\tonClick={this.onClick}\n\t\t\t\t\t\t\t\t\t\t/>\t\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</AutoSizer>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"card\" style={{flex:\"0 0 300px\"}}>\n\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t<div style={{position: \"relative\", height:\"100%\", width:\"100%\"}}>\n\t\t\t\t\t\t\t\t<div style={{position:\"absolute\", left:\"0px\", right:\"0px\", top:\"0px\", bottom:\"0px\", overflowY:\"auto\"}}>\n\t\t\t\t\t\t\t\t\t<MetricsTable \n\t\t\t\t\t\t\t\t\t\tcountry={country}\n\t\t\t\t\t\t\t\t\t\tcountryTotalDeaths={countryTotalDeaths}\n\t\t\t\t\t\t\t\t\t\tcountryTotalRecovered={countryTotalRecovered}\n\t\t\t\t\t\t\t\t\t\tcountryTotalConfirmed={countryTotalConfirmed}\n\t\t\t\t\t\t\t\t\t\tworldTotalConfirmed={worldTotalConfirmed}\n\t\t\t\t\t\t\t\t\t\tworldTotalDeaths={worldTotalDeaths}\n\t\t\t\t\t\t\t\t\t\tworldTotalRecovered={worldTotalRecovered}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<MeasuresTable\n\t\t\t\t\t\t\t\t\t\tmeasure={measure}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<footer>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction Form(props) {\n\treturn (\n\t\t<form className=\"form-inline\">\n\t\t\t<label>Compare:</label>\n\t\t\t<select\n\t\t\t\tclassName=\"form-control\" \n\t\t\t\tvalue={props.country}\n\t\t\t\tonChange={props.onCountryChange}\n\t\t\t>\n\t\t\t{countries.map((country, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<option key={i} value={country.iso3}>{country.Country}</option>\n\t\t\t\t);\n\t\t\t})}\n\t\t\t</select>\n\t\t\t<label>VS</label>\n\t\t\t<select\n\t\t\t\tclassName=\"form-control\" \n\t\t\t\tonChange={props.onMetricChange}\n\t\t\t\tvalue={props.metric}\n\t\t\t>\n\t\t\t\t<option value=\"confirmed\">Total confirmed cases</option>\n\t\t\t\t<option value=\"recovered\">Total recovered</option>\n\t\t\t\t<option value=\"deaths\">Total dead</option>\n\t\t\t</select>\n\t\t\t<DatePicker\n\t\t\t\tonChange={props.onStartDateChange}\n\t\t\t\tselected={props.startDate}\n\t\t\t/>\n\t\t\t<label>-</label>\n\t\t\t<DatePicker\n\t\t\t\tonChange={props.onEndDateChange}\n\t\t\t\tselected={props.endDate}\n\t\t\t/>\n\t\t\t<button \n\t\t\t\tclassName=\"btn\"\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tprops.onPlot();\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tSubmit\n\t\t\t</button>\n\t\t</form>\n\t);\n}\n\nfunction MetricsTable(props) {\n\tconst { \n\t\tcountry, \n\t\tcountryTotalConfirmed, \n\t\tcountryTotalRecovered, \n\t\tcountryTotalDeaths,\n\t\tworldTotalDeaths,\n\t\tworldTotalRecovered,\n\t\tworldTotalConfirmed,\n\t} = props;\n\n\tlet countryTotalActive;\n\tif(countryTotalConfirmed && countryTotalRecovered && countryTotalDeaths) {\n\t\tcountryTotalActive = countryTotalConfirmed - countryTotalRecovered - countryTotalDeaths;\n\t}\n\n\tlet worldTotalActive;\n\tif(worldTotalConfirmed && worldTotalRecovered && worldTotalDeaths) {\n\t\tworldTotalActive = worldTotalConfirmed - worldTotalRecovered - worldTotalDeaths;\n\t}\t\n\n\treturn (\n\t\t<div>\n\t\t\t<table className=\"table\">\n\t\t\t    <thead>\n\t\t\t        <tr>\n\t\t\t            <th></th>\n\t\t\t            <th>{country}</th>\n\t\t\t            <th>World</th>\n\t\t\t        </tr>\n\t\t\t    </thead>\n\t\t\t    <tbody>\n\t\t\t        <tr>\n\t\t\t            <td><span>Total Count</span></td>\n\t\t\t            <td>{countryTotalConfirmed}</td>\n\t\t\t            <td>{worldTotalConfirmed}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Total Active</span></td>\n\t\t\t            <td>{countryTotalActive}</td>\n\t\t\t            <td>{worldTotalActive}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Total Dead</span></td>\n\t\t\t            <td>{countryTotalDeaths}</td>\n\t\t\t            <td>{worldTotalDeaths}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Total Recovered</span></td>\n\t\t\t            <td>{countryTotalRecovered}</td>\n\t\t\t            <td>{worldTotalRecovered}</td>\n\t\t\t        </tr>\n\t\t\t    </tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n\nfunction MeasuresTable(props) {\n\tconst { measure } = props;\n\tvar formatTime = d3.timeFormat(\"%B %d, %Y\");\n\treturn (\n\t\t<div>\n\t\t\t<table class=\"table\">\n\t\t\t    <tbody>\n\t\t\t        <tr>\n\t\t\t            <td><span>Category</span></td>\n\t\t\t            <td>{measure.category}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Comments</span></td>\n\t\t\t            <td>{measure.comments}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Country</span></td>\n\t\t\t            <td>{measure.country}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Date Implemented</span></td>\n\t\t\t            <td>{formatTime(measure.date_implemented)}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Entry Date</span></td>\n\t\t\t            <td>{measure.entry_date}</td>\n\t\t\t        </tr>\n\t\t\t    </tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}