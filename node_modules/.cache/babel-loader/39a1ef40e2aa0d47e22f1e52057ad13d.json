{"ast":null,"code":"var _jsxFileName = \"/Users/samuelvirgo/Documents/development/ditto/covid_19/src/app.js\";\nimport React from 'react';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport * as d3 from 'd3';\nimport { countries } from './countries.js';\nimport { getTimeseriesData, getBriefData } from './rest_api.js';\nimport { measures } from './measures.js';\nimport Chart from './chart/chart.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      country: \"USA\",\n      metric: \"confirmed\",\n      startDate: new Date(2020, 1, 1),\n      endDate: new Date(),\n      measuresData: [],\n      timeseriesData: [],\n      countryTotalConfirmed: null,\n      countryTotalRecovered: null,\n      countryTotalDeaths: null,\n      measure: {},\n      loading: false\n    };\n    this.onPlot = this.onPlot.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  componentDidMount() {\n    var parseTime = d3.timeParse(\"%Y-%m-%d %H:%M:%S%Z\");\n    measures.forEach(measure => measure.date_implemented = parseTime(measure.date_implemented));\n    this.onPlot();\n  }\n\n  onClick(measure) {\n    this.setState({\n      measure: measure\n    });\n  }\n\n  async onPlot() {\n    this.setState({\n      loading: true\n    }, async () => {\n      // Get state.\n      const {\n        country,\n        metric,\n        startDate,\n        endDate\n      } = this.state; // Declare variables.\n\n      let timeseriesData = [];\n      let countryTotalConfirmed = 0;\n      let countryTotalRecovered = 0;\n      let countryTotalDeaths = 0;\n      let worldTotalConfirmed = 0;\n      let worldTotalRecovered = 0;\n      let worldTotalDeaths = 0; // Get time series data.\n\n      let data = await getTimeseriesData(country);\n\n      if (data.data && data.data.length > 0) {\n        data = data.data[0] && data.data[0].timeseries ? data.data[0].timeseries : {};\n        var parseTime = d3.timeParse(\"%-m/%-d/%y\");\n        Object.keys(data).forEach(key => {\n          let date = parseTime(key);\n\n          if (date >= startDate && date <= endDate) {\n            const value = data[key][metric];\n            timeseriesData.push({\n              date: date,\n              value: value\n            });\n          }\n\n          countryTotalConfirmed = countryTotalConfirmed + data[key].confirmed;\n          countryTotalRecovered = countryTotalRecovered + data[key].recovered;\n          countryTotalDeaths = countryTotalDeaths + data[key].deaths;\n        });\n      } // Get brief data.\n\n\n      data = await getBriefData();\n\n      if (data.data) {\n        worldTotalConfirmed = data.data.confirmed;\n        worldTotalDeaths = data.data.deaths;\n        worldTotalRecovered = data.data.recovered;\n      } // Get measures data.\n\n\n      let measuresData = [];\n      measures.forEach(measure => {\n        if (measure.iso === country && measure.date_implemented <= endDate && measure.date_implemented >= startDate) {\n          measuresData.push(measure);\n        }\n      }); // Update state.\n\n      this.setState({\n        measuresData: measuresData,\n        timeseriesData: timeseriesData,\n        countryTotalConfirmed: countryTotalConfirmed,\n        countryTotalRecovered: countryTotalRecovered,\n        countryTotalDeaths: countryTotalDeaths,\n        worldTotalConfirmed: worldTotalConfirmed,\n        worldTotalDeaths: worldTotalDeaths,\n        worldTotalRecovered: worldTotalRecovered,\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const {\n      country,\n      metric,\n      startDate,\n      endDate,\n      measuresData,\n      timeseriesData,\n      countryTotalDeaths,\n      countryTotalRecovered,\n      countryTotalConfirmed,\n      worldTotalDeaths,\n      worldTotalRecovered,\n      worldTotalConfirmed,\n      measure\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-column\",\n      style: {\n        height: \"100vh\",\n        width: \"100vw\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      style: {\n        fontSize: \"22px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 5\n      }\n    }, \"Monitor how well YOUR policy maker is dealing with the coronavirus\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-grow-1 d-flex p-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card flex-grow-1 mr-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body d-flex flex-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      country: country,\n      metric: metric,\n      startDate: startDate,\n      endDate: endDate,\n      onCountryChange: e => this.setState({\n        country: e.target.value\n      }),\n      onMetricChange: e => this.setState({\n        metric: e.target.value\n      }),\n      onStartDateChange: val => this.setState({\n        startDate: val\n      }),\n      onEndDateChange: val => this.setState({\n        endDate: val\n      }),\n      onPlot: this.onPlot,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 8\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-grow-1\",\n      style: {\n        position: \"relative\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(AutoSizer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, ({\n      height,\n      width\n    }) => /*#__PURE__*/React.createElement(Chart, {\n      height: height,\n      width: width,\n      metric: metric,\n      timeseriesData: timeseriesData,\n      measuresData: measuresData,\n      onClick: this.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      style: {\n        flex: \"0 0 300px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"100%\",\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"absolute\",\n        left: \"0px\",\n        right: \"0px\",\n        top: \"0px\",\n        bottom: \"0px\",\n        overflowY: \"auto\",\n        overflowX: \"hidden\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MetricsTable, {\n      country: country,\n      countryTotalDeaths: countryTotalDeaths,\n      countryTotalRecovered: countryTotalRecovered,\n      countryTotalConfirmed: countryTotalConfirmed,\n      worldTotalConfirmed: worldTotalConfirmed,\n      worldTotalDeaths: worldTotalDeaths,\n      worldTotalRecovered: worldTotalRecovered,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(MeasuresTable, {\n      measure: measure,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 10\n      }\n    })))))), /*#__PURE__*/React.createElement(\"footer\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 6\n      }\n    }, \"Last Updated: 10/10/2020\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 6\n      }\n    }, \"Made by dittofi. The global ranking is computed as the total number of reported active cases as a % of the countries total population. Please note that the statistics are only based on those cases reported.\")));\n  }\n\n}\n\nfunction Form(props) {\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form-inline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 4\n    }\n  }, \"Compare:\"), /*#__PURE__*/React.createElement(\"select\", {\n    className: \"form-control ml-1\",\n    value: props.country,\n    onChange: props.onCountryChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 4\n    }\n  }, countries.map((country, i) => {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: i,\n      value: country.iso3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 6\n      }\n    }, country.Country);\n  })), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"ml-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 4\n    }\n  }, \"VS\"), /*#__PURE__*/React.createElement(\"select\", {\n    className: \"form-control ml-1 mr-1\",\n    onChange: props.onMetricChange,\n    value: props.metric,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"confirmed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 5\n    }\n  }, \"Total confirmed cases\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"recovered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 5\n    }\n  }, \"Total recovered\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"deaths\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 5\n    }\n  }, \"Total dead\")), /*#__PURE__*/React.createElement(DatePicker, {\n    onChange: props.onStartDateChange,\n    selected: props.startDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"ml-1 mr-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 4\n    }\n  }, \"-\"), /*#__PURE__*/React.createElement(DatePicker, {\n    onChange: props.onEndDateChange,\n    selected: props.endDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn ml-auto\",\n    onClick: e => {\n      e.preventDefault();\n      props.onPlot();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 4\n    }\n  }, \"Submit\"));\n}\n\nfunction MetricsTable(props) {\n  const {\n    country,\n    countryTotalConfirmed,\n    countryTotalRecovered,\n    countryTotalDeaths,\n    worldTotalDeaths,\n    worldTotalRecovered,\n    worldTotalConfirmed\n  } = props;\n  let countryTotalActive;\n\n  if (countryTotalConfirmed && countryTotalRecovered && countryTotalDeaths) {\n    countryTotalActive = countryTotalConfirmed - countryTotalRecovered - countryTotalDeaths;\n  }\n\n  let worldTotalActive;\n\n  if (worldTotalConfirmed && worldTotalRecovered && worldTotalDeaths) {\n    worldTotalActive = worldTotalConfirmed - worldTotalRecovered - worldTotalDeaths;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 16\n    }\n  }, country), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 16\n    }\n  }, \"World\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 20\n    }\n  }, \"Total Count\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 16\n    }\n  }, countryTotalConfirmed), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 16\n    }\n  }, worldTotalConfirmed)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 20\n    }\n  }, \"Total Active\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 16\n    }\n  }, countryTotalActive), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 16\n    }\n  }, worldTotalActive)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 20\n    }\n  }, \"Total Dead\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 16\n    }\n  }, countryTotalDeaths), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 16\n    }\n  }, worldTotalDeaths)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 20\n    }\n  }, \"Total Recovered\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 16\n    }\n  }, countryTotalRecovered), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 16\n    }\n  }, worldTotalRecovered)))));\n}\n\nfunction MeasuresTable(props) {\n  const {\n    measure\n  } = props;\n  var formatTime = d3.timeFormat(\"%B %d, %Y\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 8\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 20\n    }\n  }, \"Category\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 16\n    }\n  }, measure.category)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 20\n    }\n  }, \"Comments\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 16\n    }\n  }, measure.comments)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 20\n    }\n  }, \"Country\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 16\n    }\n  }, measure.country)), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 20\n    }\n  }, \"Date Implemented\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 16\n    }\n  }, measure.date_implemented ? formatTime(measure.date_implemented) : \"\")), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 16\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 20\n    }\n  }, \"Entry Date\")), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 16\n    }\n  }, measure.entry_date)))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/samuelvirgo/Documents/development/ditto/covid_19/src/app.js"],"names":["React","DatePicker","AutoSizer","d3","countries","getTimeseriesData","getBriefData","measures","Chart","App","Component","constructor","props","state","country","metric","startDate","Date","endDate","measuresData","timeseriesData","countryTotalConfirmed","countryTotalRecovered","countryTotalDeaths","measure","loading","onPlot","bind","onClick","componentDidMount","parseTime","timeParse","forEach","date_implemented","setState","worldTotalConfirmed","worldTotalRecovered","worldTotalDeaths","data","length","timeseries","Object","keys","key","date","value","push","confirmed","recovered","deaths","iso","render","height","width","fontSize","e","target","val","position","flex","left","right","top","bottom","overflowY","overflowX","Form","onCountryChange","map","i","iso3","Country","onMetricChange","onStartDateChange","onEndDateChange","preventDefault","MetricsTable","countryTotalActive","worldTotalActive","MeasuresTable","formatTime","timeFormat","category","comments","entry_date"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport * as d3 from 'd3';\n\nimport { countries } from './countries.js';\nimport { getTimeseriesData, getBriefData } from './rest_api.js';\nimport { measures } from './measures.js';\nimport Chart from './chart/chart.js';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcountry: \"USA\",\n\t\t\tmetric: \"confirmed\",\n\t\t\tstartDate: new Date(2020, 1, 1),\n\t\t\tendDate: new Date(),\n\n\t\t\tmeasuresData:[],\n\t\t\ttimeseriesData:[],\n\t\t\tcountryTotalConfirmed: null,\n\t\t\tcountryTotalRecovered: null,\n\t\t\tcountryTotalDeaths: null,\n\n\t\t\tmeasure: {},\n\n\t\t\tloading: false,\n\t\t}\n\n\t\tthis.onPlot = this.onPlot.bind(this);\n\t\tthis.onClick = this.onClick.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tvar parseTime = d3.timeParse(\"%Y-%m-%d %H:%M:%S%Z\");\n\t\tmeasures.forEach((measure) => measure.date_implemented = parseTime(measure.date_implemented));\n\t\tthis.onPlot();\n\t}\n\n\tonClick(measure) {\n\t\tthis.setState({\n\t\t\tmeasure: measure,\n\t\t})\n\t}\n\n\tasync onPlot() {\n\t\tthis.setState({\n\t\t\tloading:true\n\t\t}, async () => {\n\t\t\t// Get state.\n\t\t\tconst { country, metric, startDate, endDate } = this.state;\n\n\t\t\t// Declare variables.\n\t\t\tlet timeseriesData = [];\n\t\t\t\n\t\t\tlet countryTotalConfirmed = 0;\n\t\t\tlet countryTotalRecovered = 0;\n\t\t\tlet countryTotalDeaths = 0;\n\n\t\t\tlet worldTotalConfirmed = 0;\n\t\t\tlet worldTotalRecovered = 0;\n\t\t\tlet worldTotalDeaths = 0;\n\t\t\t\n\t\t\t// Get time series data.\n\t\t\tlet data = await getTimeseriesData(country);\n\t\t\tif(data.data && data.data.length > 0) {\n\t\t\t\tdata = data.data[0] && data.data[0].timeseries ? data.data[0].timeseries : {};\n\n\t\t\t\tvar parseTime = d3.timeParse(\"%-m/%-d/%y\");\n\t\t\t\tObject.keys(data).forEach((key) => {\n\t\t\t\t\tlet date = parseTime(key);\n\t\t\t\t\tif(date >= startDate && date <= endDate) {\n\t\t\t\t\t\tconst value = data[key][metric];\n\t\t\t\t\t\ttimeseriesData.push({date:date, value:value});\n\t\t\t\t\t}\n\n\t\t\t\t\tcountryTotalConfirmed = countryTotalConfirmed + data[key].confirmed;\n\t\t\t\t\tcountryTotalRecovered = countryTotalRecovered + data[key].recovered;\n\t\t\t\t\tcountryTotalDeaths = countryTotalDeaths + data[key].deaths;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Get brief data.\n\t\t\tdata = await getBriefData();\n\t\t\tif(data.data) {\n\t\t\t\tworldTotalConfirmed = data.data.confirmed;\n\t\t\t\tworldTotalDeaths = data.data.deaths;\n\t\t\t\tworldTotalRecovered = data.data.recovered;\n\t\t\t}\n\n\t\t\t// Get measures data.\n\t\t\tlet measuresData = [];\n\t\t\tmeasures.forEach((measure) => {\n\t\t\t\tif(measure.iso === country && measure.date_implemented <= endDate && measure.date_implemented >= startDate) {\n\t\t\t\t\tmeasuresData.push(measure);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Update state.\n\t\t\tthis.setState({\n\t\t\t\tmeasuresData: measuresData,\n\t\t\t\ttimeseriesData: timeseriesData,\n\t\t\t\tcountryTotalConfirmed: countryTotalConfirmed,\n\t\t\t\tcountryTotalRecovered: countryTotalRecovered,\n\t\t\t\tcountryTotalDeaths: countryTotalDeaths,\n\t\t\t\tworldTotalConfirmed: worldTotalConfirmed,\n\t\t\t\tworldTotalDeaths: worldTotalDeaths,\n\t\t\t\tworldTotalRecovered: worldTotalRecovered,\n\t\t\t\tloading: false,\n\t\t\t})\t\t\t\n\t\t})\n\t}\n\n\trender() {\n\t\tconst { \n\t\t\tcountry, \n\t\t\tmetric, \n\t\t\tstartDate, \n\t\t\tendDate, \n\t\t\tmeasuresData,\n\t\t\ttimeseriesData,\n\t\t\tcountryTotalDeaths,\n\t\t\tcountryTotalRecovered,\n\t\t\tcountryTotalConfirmed,\n\t\t\tworldTotalDeaths,\n\t\t\tworldTotalRecovered,\n\t\t\tworldTotalConfirmed,\n\t\t\tmeasure,\t\t\n\t\t} = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"d-flex flex-column\" style={{height:\"100vh\", width:\"100vw\"}}>\n\t\t\t\t<header style={{fontSize:\"22px\"}}>\n\t\t\t\t\tMonitor how well YOUR policy maker is dealing with the coronavirus\n\t\t\t\t</header>\n\t\t\t\t<div className=\"flex-grow-1 d-flex p-3\">\n\t\t\t\t\t<div className=\"card flex-grow-1 mr-3\">\n\t\t\t\t\t\t<div className=\"card-body d-flex flex-column\">\n\t\t\t\t\t\t\t<Form\n\t\t\t\t\t\t\t\tcountry={country}\n\t\t\t\t\t\t\t\tmetric={metric}\n\t\t\t\t\t\t\t\tstartDate={startDate}\n\t\t\t\t\t\t\t\tendDate={endDate}\n\n\t\t\t\t\t\t\t\tonCountryChange={(e) => this.setState({country:e.target.value})}\n\t\t\t\t\t\t\t\tonMetricChange={(e) => this.setState({metric:e.target.value})}\n\t\t\t\t\t\t\t\tonStartDateChange={(val) => this.setState({startDate:val})}\n\t\t\t\t\t\t\t\tonEndDateChange={(val) => this.setState({endDate:val})}\n\n\t\t\t\t\t\t\t\tonPlot={this.onPlot}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<div className=\"flex-grow-1\" style={{position:\"relative\"}}>\n\t\t\t\t\t\t\t\t<AutoSizer>\n\t\t\t\t\t\t\t\t\t{({ height, width }) => (\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t<Chart\n\t\t\t\t\t\t\t\t\t\t\theight={height}\n\t\t\t\t\t\t\t\t\t\t\twidth={width}\n\t\t\t\t\t\t\t\t\t\t\tmetric={metric}\n\t\t\t\t\t\t\t\t\t\t\ttimeseriesData={timeseriesData}\n\t\t\t\t\t\t\t\t\t\t\tmeasuresData={measuresData}\n\t\t\t\t\t\t\t\t\t\t\tonClick={this.onClick}\n\t\t\t\t\t\t\t\t\t\t/>\t\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</AutoSizer>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"card\" style={{flex:\"0 0 300px\"}}>\n\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t<div style={{position: \"relative\", height:\"100%\", width:\"100%\"}}>\n\t\t\t\t\t\t\t\t<div style={{\n\t\t\t\t\t\t\t\t\tposition:\"absolute\", \n\t\t\t\t\t\t\t\t\tleft:\"0px\", \n\t\t\t\t\t\t\t\t\tright:\"0px\", \n\t\t\t\t\t\t\t\t\ttop:\"0px\", \n\t\t\t\t\t\t\t\t\tbottom:\"0px\", \n\t\t\t\t\t\t\t\t\toverflowY:\"auto\", \n\t\t\t\t\t\t\t\t\toverflowX:\"hidden\"\n\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t<MetricsTable \n\t\t\t\t\t\t\t\t\t\tcountry={country}\n\t\t\t\t\t\t\t\t\t\tcountryTotalDeaths={countryTotalDeaths}\n\t\t\t\t\t\t\t\t\t\tcountryTotalRecovered={countryTotalRecovered}\n\t\t\t\t\t\t\t\t\t\tcountryTotalConfirmed={countryTotalConfirmed}\n\t\t\t\t\t\t\t\t\t\tworldTotalConfirmed={worldTotalConfirmed}\n\t\t\t\t\t\t\t\t\t\tworldTotalDeaths={worldTotalDeaths}\n\t\t\t\t\t\t\t\t\t\tworldTotalRecovered={worldTotalRecovered}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<MeasuresTable\n\t\t\t\t\t\t\t\t\t\tmeasure={measure}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<footer>\n\t\t\t\t\t<div>Last Updated: 10/10/2020</div>\n\t\t\t\t\t<div>Made by dittofi. The global ranking is computed as the total number of reported active cases as a % of the countries total population. Please note that the statistics are only based on those cases reported.</div>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction Form(props) {\n\treturn (\n\t\t<form className=\"form-inline\">\n\t\t\t<label>Compare:</label>\n\t\t\t<select\n\t\t\t\tclassName=\"form-control ml-1\" \n\t\t\t\tvalue={props.country}\n\t\t\t\tonChange={props.onCountryChange}\n\t\t\t>\n\t\t\t{countries.map((country, i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<option key={i} value={country.iso3}>{country.Country}</option>\n\t\t\t\t);\n\t\t\t})}\n\t\t\t</select>\n\t\t\t<label className=\"ml-1\">VS</label>\n\t\t\t<select\n\t\t\t\tclassName=\"form-control ml-1 mr-1\" \n\t\t\t\tonChange={props.onMetricChange}\n\t\t\t\tvalue={props.metric}\n\t\t\t>\n\t\t\t\t<option value=\"confirmed\">Total confirmed cases</option>\n\t\t\t\t<option value=\"recovered\">Total recovered</option>\n\t\t\t\t<option value=\"deaths\">Total dead</option>\n\t\t\t</select>\n\t\t\t<DatePicker\n\t\t\t\tonChange={props.onStartDateChange}\n\t\t\t\tselected={props.startDate}\n\t\t\t/>\n\t\t\t<label className=\"ml-1 mr-1\">-</label>\n\t\t\t<DatePicker\n\t\t\t\tonChange={props.onEndDateChange}\n\t\t\t\tselected={props.endDate}\n\t\t\t/>\n\t\t\t<button \n\t\t\t\tclassName=\"btn ml-auto\"\n\t\t\t\tonClick={(e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tprops.onPlot();\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tSubmit\n\t\t\t</button>\n\t\t</form>\n\t);\n}\n\nfunction MetricsTable(props) {\n\tconst { \n\t\tcountry, \n\t\tcountryTotalConfirmed, \n\t\tcountryTotalRecovered, \n\t\tcountryTotalDeaths,\n\t\tworldTotalDeaths,\n\t\tworldTotalRecovered,\n\t\tworldTotalConfirmed,\n\t} = props;\n\n\tlet countryTotalActive;\n\tif(countryTotalConfirmed && countryTotalRecovered && countryTotalDeaths) {\n\t\tcountryTotalActive = countryTotalConfirmed - countryTotalRecovered - countryTotalDeaths;\n\t}\n\n\tlet worldTotalActive;\n\tif(worldTotalConfirmed && worldTotalRecovered && worldTotalDeaths) {\n\t\tworldTotalActive = worldTotalConfirmed - worldTotalRecovered - worldTotalDeaths;\n\t}\t\n\n\treturn (\n\t\t<div>\n\t\t\t<table className=\"table\">\n\t\t\t    <thead>\n\t\t\t        <tr>\n\t\t\t            <th></th>\n\t\t\t            <th>{country}</th>\n\t\t\t            <th>World</th>\n\t\t\t        </tr>\n\t\t\t    </thead>\n\t\t\t    <tbody>\n\t\t\t        <tr>\n\t\t\t            <td><span>Total Count</span></td>\n\t\t\t            <td>{countryTotalConfirmed}</td>\n\t\t\t            <td>{worldTotalConfirmed}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Total Active</span></td>\n\t\t\t            <td>{countryTotalActive}</td>\n\t\t\t            <td>{worldTotalActive}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Total Dead</span></td>\n\t\t\t            <td>{countryTotalDeaths}</td>\n\t\t\t            <td>{worldTotalDeaths}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Total Recovered</span></td>\n\t\t\t            <td>{countryTotalRecovered}</td>\n\t\t\t            <td>{worldTotalRecovered}</td>\n\t\t\t        </tr>\n\t\t\t    </tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n\nfunction MeasuresTable(props) {\n\tconst { measure } = props;\n\tvar formatTime = d3.timeFormat(\"%B %d, %Y\");\n\treturn (\n\t\t<div>\n\t\t\t<table className=\"table\">\n\t\t\t    <tbody>\n\t\t\t        <tr>\n\t\t\t            <td><span>Category</span></td>\n\t\t\t            <td>{measure.category}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Comments</span></td>\n\t\t\t            <td>{measure.comments}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Country</span></td>\n\t\t\t            <td>{measure.country}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Date Implemented</span></td>\n\t\t\t            <td>{measure.date_implemented ? formatTime(measure.date_implemented) : \"\"}</td>\n\t\t\t        </tr>\n\t\t\t        <tr>\n\t\t\t            <td><span>Entry Date</span></td>\n\t\t\t            <td>{measure.entry_date}</td>\n\t\t\t        </tr>\n\t\t\t    </tbody>\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}